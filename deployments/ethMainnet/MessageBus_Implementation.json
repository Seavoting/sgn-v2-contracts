{
  "address": "0xf5C6825015280CdfD0b56903F9F8B5A2233476F5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISigsVerifier",
          "name": "_sigsVerifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidityBridge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pegBridge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pegVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pegBridgeV2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pegVaultV2",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum MessageBusReceiver.MsgType",
          "name": "msgType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum MessageBusReceiver.TxStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "Executed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeBase",
          "type": "uint256"
        }
      ],
      "name": "FeeBaseUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feePerByte",
          "type": "uint256"
        }
      ],
      "name": "FeePerByteUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidityBridge",
          "type": "address"
        }
      ],
      "name": "LiquidityBridgeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dstChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "Message",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dstChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "srcTransferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "MessageWithTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pegBridge",
          "type": "address"
        }
      ],
      "name": "PegBridgeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pegBridgeV2",
          "type": "address"
        }
      ],
      "name": "PegBridgeV2Updated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pegVault",
          "type": "address"
        }
      ],
      "name": "PegVaultUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pegVaultV2",
          "type": "address"
        }
      ],
      "name": "PegVaultV2Updated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "calcFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "srcChainId",
              "type": "uint64"
            }
          ],
          "internalType": "struct MessageBusReceiver.RouteInfo",
          "name": "_route",
          "type": "tuple"
        },
        {
          "internalType": "bytes[]",
          "name": "_sigs",
          "type": "bytes[]"
        },
        {
          "internalType": "address[]",
          "name": "_signers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_powers",
          "type": "uint256[]"
        }
      ],
      "name": "executeMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "enum MessageBusReceiver.TransferType",
              "name": "t",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "seqnum",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "srcChainId",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct MessageBusReceiver.TransferInfo",
          "name": "_transfer",
          "type": "tuple"
        },
        {
          "internalType": "bytes[]",
          "name": "_sigs",
          "type": "bytes[]"
        },
        {
          "internalType": "address[]",
          "name": "_signers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_powers",
          "type": "uint256[]"
        }
      ],
      "name": "executeMessageWithTransfer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "enum MessageBusReceiver.TransferType",
              "name": "t",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "seqnum",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "srcChainId",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct MessageBusReceiver.TransferInfo",
          "name": "_transfer",
          "type": "tuple"
        },
        {
          "internalType": "bytes[]",
          "name": "_sigs",
          "type": "bytes[]"
        },
        {
          "internalType": "address[]",
          "name": "_signers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_powers",
          "type": "uint256[]"
        }
      ],
      "name": "executeMessageWithTransferRefund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "executedMessages",
      "outputs": [
        {
          "internalType": "enum MessageBusReceiver.TxStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePerByte",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidityBridge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pegBridge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pegVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pegBridgeV2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pegVaultV2",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityBridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pegBridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pegBridgeV2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pegVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pegVaultV2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_dstChainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_dstChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_srcBridge",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_srcTransferId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "sendMessageWithTransfer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setFeeBase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setFeePerByte",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setLiquidityBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setPegBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setPegBridgeV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setPegVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setPegVaultV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sigsVerifier",
      "outputs": [
        {
          "internalType": "contract ISigsVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_cumulativeFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "_sigs",
          "type": "bytes[]"
        },
        {
          "internalType": "address[]",
          "name": "_signers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_powers",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawnFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x33b80a8d464a772d2b49f568a294774125ef01364fd1662d025dfe739ebc2c8a",
  "receipt": {
    "to": null,
    "from": "0x58b529F9084D7eAA598EB3477Fe36064C5B7bbC1",
    "contractAddress": "0xf5C6825015280CdfD0b56903F9F8B5A2233476F5",
    "transactionIndex": 45,
    "gasUsed": "2623229",
    "logsBloom": "0x
    "blockHash": "0x1f52365c67e37a288f7b9afee11ba80a4fb5ad36b9d03152a30e389fb0865cd1",
    "transactionHash": "0x33b80a8d464a772d2b49f568a294774125ef01364fd1662d025dfe739ebc2c8a",
    "logs": [
      {
        "transactionIndex": 45,
        "blockNumber": 14261522,
        "transactionHash": "0x33b80a8d464a772d2b49f568a294774125ef01364fd1662d025dfe739ebc2c8a",
        "address": "0xf5C6825015280CdfD0b56903F9F8B5A2233476F5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000058b529f9084d7eaa598eb3477fe36064c5b7bbc1"
        ],
        "data": "0x",
        "logIndex": 39,
        "blockHash": "0x1f52365c67e37a288f7b9afee11ba80a4fb5ad36b9d03152a30e389fb0865cd1"
      }
    ],
    "blockNumber": 14261522,
    "cumulativeGasUsed": "5348404",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9B36f165baB9ebe611d491180418d8De4b8f3a1f",
    "0x9B36f165baB9ebe611d491180418d8De4b8f3a1f",
    "0x0000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000"
  ],
  "solcInputHash": "aea5f7577d9c18adfb4767457bc0f57e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISigsVerifier\",\"name\":\"_sigsVerifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pegBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pegVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pegBridgeV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pegVaultV2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum MessageBusReceiver.MsgType\",\"name\":\"msgType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum MessageBusReceiver.TxStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeBase\",\"type\":\"uint256\"}],\"name\":\"FeeBaseUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePerByte\",\"type\":\"uint256\"}],\"name\":\"FeePerByteUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidityBridge\",\"type\":\"address\"}],\"name\":\"LiquidityBridgeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Message\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dstChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"srcTransferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"MessageWithTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pegBridge\",\"type\":\"address\"}],\"name\":\"PegBridgeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pegBridgeV2\",\"type\":\"address\"}],\"name\":\"PegBridgeV2Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pegVault\",\"type\":\"address\"}],\"name\":\"PegVaultUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pegVaultV2\",\"type\":\"address\"}],\"name\":\"PegVaultV2Updated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"calcFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"}],\"internalType\":\"struct MessageBusReceiver.RouteInfo\",\"name\":\"_route\",\"type\":\"tuple\"},{\"internalType\":\"bytes[]\",\"name\":\"_sigs\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"executeMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"enum MessageBusReceiver.TransferType\",\"name\":\"t\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"seqnum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refId\",\"type\":\"bytes32\"}],\"internalType\":\"struct MessageBusReceiver.TransferInfo\",\"name\":\"_transfer\",\"type\":\"tuple\"},{\"internalType\":\"bytes[]\",\"name\":\"_sigs\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"executeMessageWithTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"enum MessageBusReceiver.TransferType\",\"name\":\"t\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"seqnum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refId\",\"type\":\"bytes32\"}],\"internalType\":\"struct MessageBusReceiver.TransferInfo\",\"name\":\"_transfer\",\"type\":\"tuple\"},{\"internalType\":\"bytes[]\",\"name\":\"_sigs\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"executeMessageWithTransferRefund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"executedMessages\",\"outputs\":[{\"internalType\":\"enum MessageBusReceiver.TxStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePerByte\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pegBridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pegVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pegBridgeV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pegVaultV2\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pegBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pegBridgeV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pegVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pegVaultV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_srcBridge\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_srcTransferId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"sendMessageWithTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFeeBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFeePerByte\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setLiquidityBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setPegBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setPegBridgeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setPegVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setPegVaultV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sigsVerifier\",\"outputs\":[{\"internalType\":\"contract ISigsVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cumulativeFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"_sigs\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawnFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calcFee(bytes)\":{\"params\":{\"_message\":\"Arbitrary message bytes to be decoded by the destination app contract. @return The required fee.\"}},\"executeMessage(bytes,(address,address,uint64),bytes[],address[],uint256[])\":{\"params\":{\"_message\":\"Arbitrary message bytes originated from and encoded by the source app contract\",\"_powers\":\"The signing powers of the signers.\",\"_signers\":\"The sorted list of signers.\",\"_sigs\":\"The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\"}},\"executeMessageWithTransfer(bytes,(uint8,address,address,address,uint256,uint64,uint64,bytes32),bytes[],address[],uint256[])\":{\"params\":{\"_message\":\"Arbitrary message bytes originated from and encoded by the source app contract\",\"_powers\":\"The signing powers of the signers.\",\"_signers\":\"The sorted list of signers.\",\"_sigs\":\"The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\",\"_transfer\":\"The transfer info.\"}},\"executeMessageWithTransferRefund(bytes,(uint8,address,address,address,uint256,uint64,uint64,bytes32),bytes[],address[],uint256[])\":{\"params\":{\"_message\":\"Arbitrary message bytes originated from and encoded by the source app contract\",\"_powers\":\"The signing powers of the signers.\",\"_signers\":\"The sorted list of signers.\",\"_sigs\":\"The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\",\"_transfer\":\"The transfer info.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"sendMessage(address,uint256,bytes)\":{\"params\":{\"_dstChainId\":\"The destination chain ID.\",\"_message\":\"Arbitrary message bytes to be decoded by the destination app contract.\",\"_receiver\":\"The address of the destination app contract.\"}},\"sendMessageWithTransfer(address,uint256,address,bytes32,bytes)\":{\"params\":{\"_dstChainId\":\"The destination chain ID.\",\"_message\":\"Arbitrary message bytes to be decoded by the destination app contract.\",\"_receiver\":\"The address of the destination app contract.\",\"_srcBridge\":\"The bridge contract to send the transfer with.\",\"_srcTransferId\":\"The transfer ID.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawFee(address,uint256,bytes[],address[],uint256[])\":{\"params\":{\"_account\":\"The address receiving the fee.\",\"_cumulativeFee\":\"The cumulative fee credited to the account. Tracked by SGN.\",\"_powers\":\"The signing powers of the signers.\",\"_signers\":\"The sorted list of signers.\",\"_sigs\":\"The list of signatures sorted by signing addresses in ascending order. A withdrawal must be signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calcFee(bytes)\":{\"notice\":\"Calculates the required fee for the message.\"},\"executeMessage(bytes,(address,address,uint64),bytes[],address[],uint256[])\":{\"notice\":\"Execute a message not associated with a transfer.\"},\"executeMessageWithTransfer(bytes,(uint8,address,address,address,uint256,uint64,uint64,bytes32),bytes[],address[],uint256[])\":{\"notice\":\"Execute a message with a successful transfer.\"},\"executeMessageWithTransferRefund(bytes,(uint8,address,address,address,uint256,uint64,uint64,bytes32),bytes[],address[],uint256[])\":{\"notice\":\"Execute a message with a refunded transfer.\"},\"sendMessage(address,uint256,bytes)\":{\"notice\":\"Sends a message to an app on another chain via MessageBus without an associated transfer. A fee is charged in the native gas token.\"},\"sendMessageWithTransfer(address,uint256,address,bytes32,bytes)\":{\"notice\":\"Sends a message associated with a transfer to an app on another chain via MessageBus without an associated transfer. A fee is charged in the native token.\"},\"withdrawFee(address,uint256,bytes[],address[],uint256[])\":{\"notice\":\"Withdraws message fee in the form of native gas token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/message/messagebus/MessageBus.sol\":\"MessageBus\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IBridge {\\n    function send(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage\\n    ) external;\\n\\n    function relay(\\n        bytes calldata _relayRequest,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function transfers(bytes32 transferId) external view returns (bool);\\n\\n    function withdraws(bytes32 withdrawId) external view returns (bool);\\n\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external view;\\n}\\n\",\"keccak256\":\"0xa16580c0d244b975ff74627da5bc54e86c66a278b5bdf0ab6d8afe4623eacc0d\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IOriginalTokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IOriginalTokenVault {\\n    /**\\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external;\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x94892c0bcf78d1d1de33a9c9e84b91a2b437f29ac2c457c0b3d8d340d62a4778\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IOriginalTokenVaultV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IOriginalTokenVaultV2 {\\n    /**\\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd920df6f6662b62f72b33685c4695b603bbce3f0ad32337c6bda0981ba058dd1\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IPeggedTokenBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPeggedTokenBridge {\\n    /**\\n     * @notice Burn tokens to trigger withdrawal at a remote chain's OriginalTokenVault\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _withdrawAccount account who withdraw original tokens on the remote chain\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function burn(\\n        address _token,\\n        uint256 _amount,\\n        address _withdrawAccount,\\n        uint64 _nonce\\n    ) external;\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa01de97f0a810add87abada16e8449c606289d144762bebea8244f517d55c2b9\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IPeggedTokenBridgeV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPeggedTokenBridgeV2 {\\n    /**\\n     * @notice Burn pegged tokens to trigger a cross-chain withdrawal of the original tokens at a remote chain's\\n     * OriginalTokenVault, or mint at another remote chain\\n     * @param _token The pegged token address.\\n     * @param _amount The amount to burn.\\n     * @param _toChainId If zero, withdraw from original vault; otherwise, the remote chain to mint tokens.\\n     * @param _toAccount The account to receive tokens on the remote chain\\n     * @param _nonce A number to guarantee unique depositId. Can be timestamp in practice.\\n     */\\n    function burn(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _toChainId,\\n        address _toAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xffd310e20d7fbc6ffc5b75f961fd72466ae0cf04f5e79e2e2cb23ec02ecb9ca7\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/ISigsVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\ninterface ISigsVerifier {\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x44ac7b3c2911c6dad4e33ce8680ab5f0868aaf8965b90ea9621e8fd338c70350\",\"license\":\"GPL-3.0-only\"},\"contracts/message/interfaces/IMessageReceiverApp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessageReceiverApp {\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) if the process is originated from MessageBus (MessageBusSender)'s\\n     *         sendMessageWithTransfer it is only called when the tokens are checked to be arrived at this contract's address.\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     */\\n    function executeMessageWithTransfer(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message\\n    ) external payable returns (bool);\\n\\n    /**\\n     * @notice Only called by MessageBus (MessageBusReceiver) if\\n     *         1. executeMessageWithTransfer reverts, or\\n     *         2. executeMessageWithTransfer returns false\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     */\\n    function executeMessageWithTransferFallback(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message\\n    ) external payable returns (bool);\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\\n     * @param _token The token address of the original transfer\\n     * @param _amount The amount of the original transfer\\n     * @param _message The same message associated with the original transfer\\n     */\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message\\n    ) external payable returns (bool);\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver)\\n     * @param _sender The address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     */\\n    function executeMessage(\\n        address _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x913c26dee916d620d3f7d9dabab452cd6ddebc118095b9d3e8813830ad497cf4\",\"license\":\"GPL-3.0-only\"},\"contracts/message/messagebus/MessageBus.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./MessageBusSender.sol\\\";\\nimport \\\"./MessageBusReceiver.sol\\\";\\n\\ncontract MessageBus is MessageBusSender, MessageBusReceiver {\\n    constructor(\\n        ISigsVerifier _sigsVerifier,\\n        address _liquidityBridge,\\n        address _pegBridge,\\n        address _pegVault,\\n        address _pegBridgeV2,\\n        address _pegVaultV2\\n    )\\n        MessageBusSender(_sigsVerifier)\\n        MessageBusReceiver(_liquidityBridge, _pegBridge, _pegVault, _pegBridgeV2, _pegVaultV2)\\n    {}\\n\\n    // this is only to be called by Proxy via delegateCall as initOwner will require _owner is 0.\\n    // so calling init on this contract directly will guarantee to fail\\n    function init(\\n        address _liquidityBridge,\\n        address _pegBridge,\\n        address _pegVault,\\n        address _pegBridgeV2,\\n        address _pegVaultV2\\n    ) external {\\n        // MUST manually call ownable init and must only call once\\n        initOwner();\\n        // we don't need sender init as _sigsVerifier is immutable so already in the deployed code\\n        initReceiver(_liquidityBridge, _pegBridge, _pegVault, _pegBridgeV2, _pegVaultV2);\\n    }\\n}\\n\",\"keccak256\":\"0x53f186341ed503c54f70ef9ca96a405b1d221721590ea611463fe88477a325a9\",\"license\":\"GPL-3.0-only\"},\"contracts/message/messagebus/MessageBusReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../interfaces/IBridge.sol\\\";\\nimport \\\"../../interfaces/IOriginalTokenVault.sol\\\";\\nimport \\\"../../interfaces/IOriginalTokenVaultV2.sol\\\";\\nimport \\\"../../interfaces/IPeggedTokenBridge.sol\\\";\\nimport \\\"../../interfaces/IPeggedTokenBridgeV2.sol\\\";\\nimport \\\"../interfaces/IMessageReceiverApp.sol\\\";\\nimport \\\"../../safeguard/Ownable.sol\\\";\\n\\ncontract MessageBusReceiver is Ownable {\\n    enum TransferType {\\n        Null,\\n        LqSend, // send through liquidity bridge\\n        LqWithdraw, // withdraw from liquidity bridge\\n        PegMint, // mint through pegged token bridge\\n        PegWithdraw, // withdraw from original token vault\\n        PegMintV2, // mint through pegged token bridge v2\\n        PegWithdrawV2 // withdraw from original token vault v2\\n    }\\n\\n    struct TransferInfo {\\n        TransferType t;\\n        address sender;\\n        address receiver;\\n        address token;\\n        uint256 amount;\\n        uint64 seqnum; // only needed for LqWithdraw\\n        uint64 srcChainId;\\n        bytes32 refId;\\n    }\\n\\n    struct RouteInfo {\\n        address sender;\\n        address receiver;\\n        uint64 srcChainId;\\n    }\\n\\n    enum TxStatus {\\n        Null,\\n        Success,\\n        Fail,\\n        Fallback,\\n        Pending\\n    }\\n    mapping(bytes32 => TxStatus) public executedMessages;\\n\\n    address public liquidityBridge; // liquidity bridge address\\n    address public pegBridge; // peg bridge address\\n    address public pegVault; // peg original vault address\\n    address public pegBridgeV2; // peg bridge address\\n    address public pegVaultV2; // peg original vault address\\n\\n    enum MsgType {\\n        MessageWithTransfer,\\n        MessageOnly\\n    }\\n    event Executed(MsgType msgType, bytes32 id, TxStatus status);\\n    event LiquidityBridgeUpdated(address liquidityBridge);\\n    event PegBridgeUpdated(address pegBridge);\\n    event PegVaultUpdated(address pegVault);\\n    event PegBridgeV2Updated(address pegBridgeV2);\\n    event PegVaultV2Updated(address pegVaultV2);\\n\\n    constructor(\\n        address _liquidityBridge,\\n        address _pegBridge,\\n        address _pegVault,\\n        address _pegBridgeV2,\\n        address _pegVaultV2\\n    ) {\\n        liquidityBridge = _liquidityBridge;\\n        pegBridge = _pegBridge;\\n        pegVault = _pegVault;\\n        pegBridgeV2 = _pegBridgeV2;\\n        pegVaultV2 = _pegVaultV2;\\n    }\\n\\n    function initReceiver(\\n        address _liquidityBridge,\\n        address _pegBridge,\\n        address _pegVault,\\n        address _pegBridgeV2,\\n        address _pegVaultV2\\n    ) internal {\\n        require(liquidityBridge == address(0), \\\"liquidityBridge already set\\\");\\n        liquidityBridge = _liquidityBridge;\\n        pegBridge = _pegBridge;\\n        pegVault = _pegVault;\\n        pegBridgeV2 = _pegBridgeV2;\\n        pegVaultV2 = _pegVaultV2;\\n    }\\n\\n    // ============== functions called by executor ==============\\n\\n    /**\\n     * @notice Execute a message with a successful transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransfer(\\n        bytes calldata _message,\\n        TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable {\\n        // For message with token transfer, message Id is computed through transfer info\\n        // in order to guarantee that each transfer can only be used once.\\n        // This also indicates that different transfers can carry the exact same messages.\\n        bytes32 messageId = verifyTransfer(_transfer);\\n        require(executedMessages[messageId] == TxStatus.Null, \\\"transfer already executed\\\");\\n        executedMessages[messageId] = TxStatus.Pending;\\n\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"MessageWithTransfer\\\"));\\n        IBridge(liquidityBridge).verifySigs(abi.encodePacked(domain, messageId, _message), _sigs, _signers, _powers);\\n        TxStatus status;\\n        bool success = executeMessageWithTransfer(_transfer, _message);\\n        if (success) {\\n            status = TxStatus.Success;\\n        } else {\\n            success = executeMessageWithTransferFallback(_transfer, _message);\\n            if (success) {\\n                status = TxStatus.Fallback;\\n            } else {\\n                status = TxStatus.Fail;\\n            }\\n        }\\n        executedMessages[messageId] = status;\\n        emit Executed(MsgType.MessageWithTransfer, messageId, status);\\n    }\\n\\n    /**\\n     * @notice Execute a message with a refunded transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransferRefund(\\n        bytes calldata _message, // the same message associated with the original transfer\\n        TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable {\\n        // similar to executeMessageWithTransfer\\n        bytes32 messageId = verifyTransfer(_transfer);\\n        require(executedMessages[messageId] == TxStatus.Null, \\\"transfer already executed\\\");\\n        executedMessages[messageId] = TxStatus.Pending;\\n\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"MessageWithTransferRefund\\\"));\\n        IBridge(liquidityBridge).verifySigs(abi.encodePacked(domain, messageId, _message), _sigs, _signers, _powers);\\n        TxStatus status;\\n        bool success = executeMessageWithTransferRefund(_transfer, _message);\\n        if (success) {\\n            status = TxStatus.Success;\\n        } else {\\n            status = TxStatus.Fail;\\n        }\\n        executedMessages[messageId] = status;\\n        emit Executed(MsgType.MessageWithTransfer, messageId, status);\\n    }\\n\\n    /**\\n     * @notice Execute a message not associated with a transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessage(\\n        bytes calldata _message,\\n        RouteInfo calldata _route,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable {\\n        // For message without associated token transfer, message Id is computed through message info,\\n        // in order to guarantee that each message can only be applied once\\n        bytes32 messageId = computeMessageOnlyId(_route, _message);\\n        require(executedMessages[messageId] == TxStatus.Null, \\\"message already executed\\\");\\n        executedMessages[messageId] = TxStatus.Pending;\\n\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"Message\\\"));\\n        IBridge(liquidityBridge).verifySigs(abi.encodePacked(domain, messageId), _sigs, _signers, _powers);\\n        TxStatus status;\\n        bool success = executeMessage(_route, _message);\\n        if (success) {\\n            status = TxStatus.Success;\\n        } else {\\n            status = TxStatus.Fail;\\n        }\\n        executedMessages[messageId] = status;\\n        emit Executed(MsgType.MessageOnly, messageId, status);\\n    }\\n\\n    // ================= utils (to avoid stack too deep) =================\\n\\n    function executeMessageWithTransfer(TransferInfo calldata _transfer, bytes calldata _message)\\n        private\\n        returns (bool)\\n    {\\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\\n            abi.encodeWithSelector(\\n                IMessageReceiverApp.executeMessageWithTransfer.selector,\\n                _transfer.sender,\\n                _transfer.token,\\n                _transfer.amount,\\n                _transfer.srcChainId,\\n                _message\\n            )\\n        );\\n        if (ok) {\\n            bool success = abi.decode((res), (bool));\\n            return success;\\n        }\\n        return false;\\n    }\\n\\n    function executeMessageWithTransferFallback(TransferInfo calldata _transfer, bytes calldata _message)\\n        private\\n        returns (bool)\\n    {\\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\\n            abi.encodeWithSelector(\\n                IMessageReceiverApp.executeMessageWithTransferFallback.selector,\\n                _transfer.sender,\\n                _transfer.token,\\n                _transfer.amount,\\n                _transfer.srcChainId,\\n                _message\\n            )\\n        );\\n        if (ok) {\\n            bool success = abi.decode((res), (bool));\\n            return success;\\n        }\\n        return false;\\n    }\\n\\n    function executeMessageWithTransferRefund(TransferInfo calldata _transfer, bytes calldata _message)\\n        private\\n        returns (bool)\\n    {\\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\\n            abi.encodeWithSelector(\\n                IMessageReceiverApp.executeMessageWithTransferRefund.selector,\\n                _transfer.token,\\n                _transfer.amount,\\n                _message\\n            )\\n        );\\n        if (ok) {\\n            bool success = abi.decode((res), (bool));\\n            return success;\\n        }\\n        return false;\\n    }\\n\\n    function verifyTransfer(TransferInfo calldata _transfer) private view returns (bytes32) {\\n        bytes32 transferId;\\n        address bridgeAddr;\\n        if (_transfer.t == TransferType.LqSend) {\\n            transferId = keccak256(\\n                abi.encodePacked(\\n                    _transfer.sender,\\n                    _transfer.receiver,\\n                    _transfer.token,\\n                    _transfer.amount,\\n                    _transfer.srcChainId,\\n                    uint64(block.chainid),\\n                    _transfer.refId\\n                )\\n            );\\n            bridgeAddr = liquidityBridge;\\n            require(IBridge(bridgeAddr).transfers(transferId) == true, \\\"bridge relay not exist\\\");\\n        } else if (_transfer.t == TransferType.LqWithdraw) {\\n            transferId = keccak256(\\n                abi.encodePacked(\\n                    uint64(block.chainid),\\n                    _transfer.seqnum,\\n                    _transfer.receiver,\\n                    _transfer.token,\\n                    _transfer.amount\\n                )\\n            );\\n            bridgeAddr = liquidityBridge;\\n            require(IBridge(bridgeAddr).withdraws(transferId) == true, \\\"bridge withdraw not exist\\\");\\n        } else if (_transfer.t == TransferType.PegMint || _transfer.t == TransferType.PegWithdraw) {\\n            transferId = keccak256(\\n                abi.encodePacked(\\n                    _transfer.receiver,\\n                    _transfer.token,\\n                    _transfer.amount,\\n                    _transfer.sender,\\n                    _transfer.srcChainId,\\n                    _transfer.refId\\n                )\\n            );\\n            if (_transfer.t == TransferType.PegMint) {\\n                bridgeAddr = pegBridge;\\n                require(IPeggedTokenBridge(bridgeAddr).records(transferId) == true, \\\"mint record not exist\\\");\\n            } else {\\n                // _transfer.t == TransferType.PegWithdraw\\n                bridgeAddr = pegVault;\\n                require(IOriginalTokenVault(bridgeAddr).records(transferId) == true, \\\"withdraw record not exist\\\");\\n            }\\n        } else if (_transfer.t == TransferType.PegMintV2 || _transfer.t == TransferType.PegWithdrawV2) {\\n            if (_transfer.t == TransferType.PegMintV2) {\\n                bridgeAddr = pegBridgeV2;\\n            } else {\\n                // TransferType.PegWithdrawV2\\n                bridgeAddr = pegVaultV2;\\n            }\\n            transferId = keccak256(\\n                abi.encodePacked(\\n                    _transfer.receiver,\\n                    _transfer.token,\\n                    _transfer.amount,\\n                    _transfer.sender,\\n                    _transfer.srcChainId,\\n                    _transfer.refId,\\n                    bridgeAddr\\n                )\\n            );\\n            if (_transfer.t == TransferType.PegMintV2) {\\n                require(IPeggedTokenBridgeV2(bridgeAddr).records(transferId) == true, \\\"mint record not exist\\\");\\n            } else {\\n                // TransferType.PegWithdrawV2\\n                require(IOriginalTokenVaultV2(bridgeAddr).records(transferId) == true, \\\"withdraw record not exist\\\");\\n            }\\n        }\\n        return keccak256(abi.encodePacked(MsgType.MessageWithTransfer, bridgeAddr, transferId));\\n    }\\n\\n    function computeMessageOnlyId(RouteInfo calldata _route, bytes calldata _message) private pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(MsgType.MessageOnly, _route.sender, _route.receiver, _route.srcChainId, _message)\\n            );\\n    }\\n\\n    function executeMessage(RouteInfo calldata _route, bytes calldata _message) private returns (bool) {\\n        (bool ok, bytes memory res) = address(_route.receiver).call{value: msg.value}(\\n            abi.encodeWithSelector(\\n                IMessageReceiverApp.executeMessage.selector,\\n                _route.sender,\\n                _route.srcChainId,\\n                _message\\n            )\\n        );\\n        if (ok) {\\n            bool success = abi.decode((res), (bool));\\n            return success;\\n        }\\n        return false;\\n    }\\n\\n    // ================= contract addr config =================\\n\\n    function setLiquidityBridge(address _addr) public onlyOwner {\\n        require(_addr != address(0), \\\"invalid address\\\");\\n        liquidityBridge = _addr;\\n        emit LiquidityBridgeUpdated(liquidityBridge);\\n    }\\n\\n    function setPegBridge(address _addr) public onlyOwner {\\n        require(_addr != address(0), \\\"invalid address\\\");\\n        pegBridge = _addr;\\n        emit PegBridgeUpdated(pegBridge);\\n    }\\n\\n    function setPegVault(address _addr) public onlyOwner {\\n        require(_addr != address(0), \\\"invalid address\\\");\\n        pegVault = _addr;\\n        emit PegVaultUpdated(pegVault);\\n    }\\n\\n    function setPegBridgeV2(address _addr) public onlyOwner {\\n        require(_addr != address(0), \\\"invalid address\\\");\\n        pegBridgeV2 = _addr;\\n        emit PegBridgeV2Updated(pegBridgeV2);\\n    }\\n\\n    function setPegVaultV2(address _addr) public onlyOwner {\\n        require(_addr != address(0), \\\"invalid address\\\");\\n        pegVaultV2 = _addr;\\n        emit PegVaultV2Updated(pegVaultV2);\\n    }\\n}\\n\",\"keccak256\":\"0x2700fe0720a1132aca54410c0a892777fe10a912b45a8dc2bef44d38d2d9410c\",\"license\":\"GPL-3.0-only\"},\"contracts/message/messagebus/MessageBusSender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../safeguard/Ownable.sol\\\";\\nimport \\\"../../interfaces/ISigsVerifier.sol\\\";\\n\\ncontract MessageBusSender is Ownable {\\n    ISigsVerifier public immutable sigsVerifier;\\n\\n    uint256 public feeBase;\\n    uint256 public feePerByte;\\n    mapping(address => uint256) public withdrawnFees;\\n\\n    event Message(address indexed sender, address receiver, uint256 dstChainId, bytes message, uint256 fee);\\n\\n    event MessageWithTransfer(\\n        address indexed sender,\\n        address receiver,\\n        uint256 dstChainId,\\n        address bridge,\\n        bytes32 srcTransferId,\\n        bytes message,\\n        uint256 fee\\n    );\\n\\n    event FeeBaseUpdated(uint256 feeBase);\\n    event FeePerByteUpdated(uint256 feePerByte);\\n\\n    constructor(ISigsVerifier _sigsVerifier) {\\n        sigsVerifier = _sigsVerifier;\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\\n     * A fee is charged in the native gas token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message\\n    ) external payable {\\n        uint256 minFee = calcFee(_message);\\n        require(msg.value >= minFee, \\\"Insufficient fee\\\");\\n        emit Message(msg.sender, _receiver, _dstChainId, _message, msg.value);\\n    }\\n\\n    /**\\n     * @notice Sends a message associated with a transfer to an app on another chain via MessageBus without an associated transfer.\\n     * A fee is charged in the native token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _srcBridge The bridge contract to send the transfer with.\\n     * @param _srcTransferId The transfer ID.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        address _srcBridge,\\n        bytes32 _srcTransferId,\\n        bytes calldata _message\\n    ) external payable {\\n        uint256 minFee = calcFee(_message);\\n        require(msg.value >= minFee, \\\"Insufficient fee\\\");\\n        // SGN needs to verify\\n        // 1. msg.sender matches sender of the src transfer\\n        // 2. dstChainId matches dstChainId of the src transfer\\n        // 3. bridge is either liquidity bridge, peg src vault, or peg dst bridge\\n        emit MessageWithTransfer(msg.sender, _receiver, _dstChainId, _srcBridge, _srcTransferId, _message, msg.value);\\n    }\\n\\n    /**\\n     * @notice Withdraws message fee in the form of native gas token.\\n     * @param _account The address receiving the fee.\\n     * @param _cumulativeFee The cumulative fee credited to the account. Tracked by SGN.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\\n     * signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdrawFee(\\n        address _account,\\n        uint256 _cumulativeFee,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external {\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"withdrawFee\\\"));\\n        sigsVerifier.verifySigs(abi.encodePacked(domain, _account, _cumulativeFee), _sigs, _signers, _powers);\\n        uint256 amount = _cumulativeFee - withdrawnFees[_account];\\n        require(amount > 0, \\\"No new amount to withdraw\\\");\\n        withdrawnFees[_account] = _cumulativeFee;\\n        (bool sent, ) = _account.call{value: amount, gas: 50000}(\\\"\\\");\\n        require(sent, \\\"failed to withdraw fee\\\");\\n    }\\n\\n    /**\\n     * @notice Calculates the required fee for the message.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     @ @return The required fee.\\n     */\\n    function calcFee(bytes calldata _message) public view returns (uint256) {\\n        return feeBase + _message.length * feePerByte;\\n    }\\n\\n    // -------------------- Admin --------------------\\n\\n    function setFeePerByte(uint256 _fee) external onlyOwner {\\n        feePerByte = _fee;\\n        emit FeePerByteUpdated(feePerByte);\\n    }\\n\\n    function setFeeBase(uint256 _fee) external onlyOwner {\\n        feeBase = _fee;\\n        emit FeeBaseUpdated(feeBase);\\n    }\\n}\\n\",\"keccak256\":\"0x214d51b9c8174e433161fd9ea60aa8ac3f74617093f51805592d31bf489ec71b\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\\n * renounceOwnership. So we can support Proxy based upgradable contract\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\\n     * we require _owner == address(0), which is only possible when it's a delegateCall\\n     * because constructor sets _owner in contract state.\\n     */\\n    function initOwner() internal {\\n        require(_owner == address(0), \\\"owner already set\\\");\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x2a92103195b8dce0f34fdf9bf7f94ddf38bf8edf0c0fd4be21323c47016687e9\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002f3838038062002f3883398101604081905262000034916200011d565b84848484848a6200004533620000b4565b6001600160a01b03908116608052600580546001600160a01b0319908116978316979097179055600680548716958216959095179094556007805486169385169390931790925560088054851691841691909117905560098054909316911617905550620001b1945050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200011a57600080fd5b50565b60008060008060008060c087890312156200013757600080fd5b8651620001448162000104565b6020880151909650620001578162000104565b60408801519095506200016a8162000104565b60608801519094506200017d8162000104565b6080880151909350620001908162000104565b60a0880151909250620001a38162000104565b809150509295509295509295565b608051612d64620001d46000396000818161041001526107790152612d646000f3fe6080604052600436106101ac5760003560e01c806395b12c27116100ec578063cd2abd661161008a578063e2c1ed2511610064578063e2c1ed25146104af578063f2fde38b146104cf578063f60bbe2a146104ef578063f83b0fb91461050557600080fd5b8063cd2abd6614610432578063d8257d171461046f578063dfa2dbaf1461048f57600080fd5b80639f3ce55a116100c65780639f3ce55a146103b8578063a2232213146103cb578063c66a9c5a146103de578063ccf2683b146103fe57600080fd5b806395b12c271461036257806395e911a8146103825780639b05a7751461039857600080fd5b8063588be02b11610159578063654317bf11610133578063654317bf146102d957806382980dc4146102ec57806382efd502146103245780638da5cb5b1461034457600080fd5b8063588be02b14610279578063588df416146102995780635b3e5f50146102ac57600080fd5b8063359ef75b1161018a578063359ef75b146102135780634289fbb3146102335780635335dca21461024657600080fd5b806303cbfe66146101b157806306c28bd6146101d35780632ff4c411146101f3575b600080fd5b3480156101bd57600080fd5b506101d16101cc366004612347565b610525565b005b3480156101df57600080fd5b506101d16101ee366004612362565b610630565b3480156101ff57600080fd5b506101d161020e3660046123c7565b6106ce565b34801561021f57600080fd5b506101d161022e36600461247b565b610927565b6101d1610241366004612522565b610943565b34801561025257600080fd5b5061026661026136600461259a565b6109ea565b6040519081526020015b60405180910390f35b34801561028557600080fd5b506101d1610294366004612347565b610a10565b6101d16102a73660046125dc565b610b0f565b3480156102b857600080fd5b506102666102c7366004612347565b60036020526000908152604090205481565b6101d16102e73660046126cd565b610d52565b3480156102f857600080fd5b5060055461030c906001600160a01b031681565b6040516001600160a01b039091168152602001610270565b34801561033057600080fd5b506101d161033f366004612347565b610f61565b34801561035057600080fd5b506000546001600160a01b031661030c565b34801561036e57600080fd5b5060085461030c906001600160a01b031681565b34801561038e57600080fd5b5061026660015481565b3480156103a457600080fd5b506101d16103b3366004612347565b611060565b6101d16103c6366004612794565b61115f565b6101d16103d93660046125dc565b611200565b3480156103ea57600080fd5b5060095461030c906001600160a01b031681565b34801561040a57600080fd5b5061030c7f000000000000000000000000000000000000000000000000000000000000000081565b34801561043e57600080fd5b5061046261044d366004612362565b60046020526000908152604090205460ff1681565b6040516102709190612818565b34801561047b57600080fd5b5060075461030c906001600160a01b031681565b34801561049b57600080fd5b5060065461030c906001600160a01b031681565b3480156104bb57600080fd5b506101d16104ca366004612362565b6113da565b3480156104db57600080fd5b506101d16104ea366004612347565b611478565b3480156104fb57600080fd5b5061026660025481565b34801561051157600080fd5b506101d1610520366004612347565b611569565b336105386000546001600160a01b031690565b6001600160a01b0316146105935760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b0381166105db5760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b604482015260640161058a565b600680546001600160a01b0319166001600160a01b0383169081179091556040519081527fd60e9ceb4f54f1bfb1741a4b35fc9d806d7ed48200b523203b92248ea38fa17d906020015b60405180910390a150565b336106436000546001600160a01b031690565b6001600160a01b0316146106995760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161058a565b60018190556040518181527f892dfdc99ecd3bb4f2f2cb118dca02f0bd16640ff156d3c6459d4282e336a5f290602001610625565b6000463060405160200161071f92919091825260601b6001600160601b03191660208201527f77697468647261774665650000000000000000000000000000000000000000006034820152603f0190565b60408051808303601f19018152828252805160209182012090830181905260608c901b6001600160601b0319168383015260548084018c9052825180850390910181526074840192839052633416de1160e11b90925292507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169163682dbc22916107c0918b908b908b908b908b908b90607801612915565b60006040518083038186803b1580156107d857600080fd5b505afa1580156107ec573d6000803e3d6000fd5b505050506001600160a01b038916600090815260036020526040812054610813908a612a25565b9050600081116108655760405162461bcd60e51b815260206004820152601960248201527f4e6f206e657720616d6f756e7420746f20776974686472617700000000000000604482015260640161058a565b6001600160a01b038a166000818152600360205260408082208c90555190919061c35090849084818181858888f193505050503d80600081146108c4576040519150601f19603f3d011682016040523d82523d6000602084013e6108c9565b606091505b505090508061091a5760405162461bcd60e51b815260206004820152601660248201527f6661696c656420746f2077697468647261772066656500000000000000000000604482015260640161058a565b5050505050505050505050565b61092f611668565b61093c85858585856116cc565b5050505050565b600061094f83836109ea565b9050803410156109945760405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742066656560801b604482015260640161058a565b336001600160a01b03167f172762498a59a3bc4fed3f2b63f94f17ea0193cffdc304fe7d3eaf4d342d2f66888888888888346040516109d99796959493929190612a3c565b60405180910390a250505050505050565b6002546000906109fa9083612a89565b600154610a079190612aa8565b90505b92915050565b33610a236000546001600160a01b031690565b6001600160a01b031614610a795760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161058a565b6001600160a01b038116610ac15760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b604482015260640161058a565b600580546001600160a01b0319166001600160a01b0383169081179091556040519081527fbf9977180dc6e6cff25598c8e59150cecd7f8e448e092633d38ab7ee223ae05890602001610625565b6000610b1a88611784565b90506000808281526004602081905260409091205460ff1690811115610b4257610b426127ee565b14610b8f5760405162461bcd60e51b815260206004820152601960248201527f7472616e7366657220616c726561647920657865637574656400000000000000604482015260640161058a565b6000818152600460208181526040808420805460ff1916909317909255815146918101919091526001600160601b03193060601b16918101919091527f4d657373616765576974685472616e73666572526566756e64000000000000006054820152606d01604051602081830303815290604052805190602001209050600560009054906101000a90046001600160a01b03166001600160a01b031663682dbc2282848e8e604051602001610c479493929190612ac0565b6040516020818303038152906040528a8a8a8a8a8a6040518863ffffffff1660e01b8152600401610c7e9796959493929190612915565b60006040518083038186803b158015610c9657600080fd5b505afa158015610caa573d6000803e3d6000fd5b50505050600080610cbc8b8e8e61203d565b90508015610ccd5760019150610cd2565b600291505b60008481526004602081905260409091208054849260ff19909116906001908490811115610d0257610d026127ee565b02179055507f29122f2c841ca2c3b2feefc4c23e90755d735d8e5b84f307151532e0f1ad62e760008584604051610d3b93929190612ae1565b60405180910390a150505050505050505050505050565b6000610d5f888b8b612174565b90506000808281526004602081905260409091205460ff1690811115610d8757610d876127ee565b14610dd45760405162461bcd60e51b815260206004820152601860248201527f6d65737361676520616c72656164792065786563757465640000000000000000604482015260640161058a565b600081815260046020818152604092839020805460ff1916909217909155815146818301523060601b6001600160601b031916818401527f4d6573736167650000000000000000000000000000000000000000000000000060548201528251603b818303018152605b820184528051920191909120600554607b8301829052609b8084018690528451808503909101815260bb840194859052633416de1160e11b90945290926001600160a01b039091169163682dbc2291610ea4918c908c908c908c908c908c9060bf01612915565b60006040518083038186803b158015610ebc57600080fd5b505afa158015610ed0573d6000803e3d6000fd5b50505050600080610ee28b8e8e6121db565b90508015610ef35760019150610ef8565b600291505b60008481526004602081905260409091208054849260ff19909116906001908490811115610f2857610f286127ee565b02179055507f29122f2c841ca2c3b2feefc4c23e90755d735d8e5b84f307151532e0f1ad62e760018584604051610d3b93929190612ae1565b33610f746000546001600160a01b031690565b6001600160a01b031614610fca5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161058a565b6001600160a01b0381166110125760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b604482015260640161058a565b600880546001600160a01b0319166001600160a01b0383169081179091556040519081527ffb337a6c76476534518d5816caeb86263972470fedccfd047a35eb1825eaa9e890602001610625565b336110736000546001600160a01b031690565b6001600160a01b0316146110c95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161058a565b6001600160a01b0381166111115760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b604482015260640161058a565b600780546001600160a01b0319166001600160a01b0383169081179091556040519081527fa9db0c32d9c6c2f75f3b95047a9e67cc1c010eab792a4e6ca777ce918ad94aad90602001610625565b600061116b83836109ea565b9050803410156111b05760405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742066656560801b604482015260640161058a565b336001600160a01b03167fce3972bfffe49d317e1d128047a97a3d86b25c94f6f04409f988ef854d25e0e486868686346040516111f1959493929190612b13565b60405180910390a25050505050565b600061120b88611784565b90506000808281526004602081905260409091205460ff1690811115611233576112336127ee565b146112805760405162461bcd60e51b815260206004820152601960248201527f7472616e7366657220616c726561647920657865637574656400000000000000604482015260640161058a565b6000818152600460208181526040808420805460ff1916909317909255815146918101919091526001600160601b03193060601b16918101919091527f4d657373616765576974685472616e73666572000000000000000000000000006054820152606701604051602081830303815290604052805190602001209050600560009054906101000a90046001600160a01b03166001600160a01b031663682dbc2282848e8e6040516020016113389493929190612ac0565b6040516020818303038152906040528a8a8a8a8a8a6040518863ffffffff1660e01b815260040161136f9796959493929190612915565b60006040518083038186803b15801561138757600080fd5b505afa15801561139b573d6000803e3d6000fd5b505050506000806113ad8b8e8e612233565b905080156113be5760019150610cd2565b6113c98b8e8e6122a5565b90508015610ccd5760039150610cd2565b336113ed6000546001600160a01b031690565b6001600160a01b0316146114435760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161058a565b60028190556040518181527f210d4d5d2d36d571207dac98e383e2441c684684c885fb2d7c54f8d24422074c90602001610625565b3361148b6000546001600160a01b031690565b6001600160a01b0316146114e15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161058a565b6001600160a01b03811661155d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161058a565b611566816122db565b50565b3361157c6000546001600160a01b031690565b6001600160a01b0316146115d25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161058a565b6001600160a01b03811661161a5760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b604482015260640161058a565b600980546001600160a01b0319166001600160a01b0383169081179091556040519081527f918a691a2a82482a10e11f43d7b627b2ba220dd08f251cb61933c42560f6fcb590602001610625565b6000546001600160a01b0316156116c15760405162461bcd60e51b815260206004820152601160248201527f6f776e657220616c726561647920736574000000000000000000000000000000604482015260640161058a565b6116ca336122db565b565b6005546001600160a01b0316156117255760405162461bcd60e51b815260206004820152601b60248201527f6c697175696469747942726964676520616c7265616479207365740000000000604482015260640161058a565b600580546001600160a01b03199081166001600160a01b03978816179091556006805482169587169590951790945560078054851693861693909317909255600880548416918516919091179055600980549092169216919091179055565b6000808060016117976020860186612b4e565b60068111156117a8576117a86127ee565b1415611943576117be6040850160208601612347565b6117ce6060860160408701612347565b6117de6080870160608801612347565b60808701356117f360e0890160c08a01612b6f565b6040516001600160601b0319606096871b8116602083015294861b851660348201529290941b9092166048820152605c8101919091526001600160c01b031960c092831b8116607c8301524690921b909116608482015260e0850135608c82015260ac0160408051808303601f19018152908290528051602090910120600554633c64f04b60e01b8352600483018290529093506001600160a01b031691508190633c64f04b9060240160206040518083038186803b1580156118b557600080fd5b505afa1580156118c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ed9190612b99565b151560011461193e5760405162461bcd60e51b815260206004820152601660248201527f6272696467652072656c6179206e6f7420657869737400000000000000000000604482015260640161058a565b612008565b60026119526020860186612b4e565b6006811115611963576119636127ee565b1415611ad0574661197a60c0860160a08701612b6f565b61198a6060870160408801612347565b61199a6080880160608901612347565b6040516001600160c01b031960c095861b811660208301529390941b90921660288401526001600160601b0319606091821b8116603085015291901b1660448201526080850135605882015260780160408051808303601f19018152908290528051602090910120600554631c13568560e31b8352600483018290529093506001600160a01b03169150819063e09ab4289060240160206040518083038186803b158015611a4757600080fd5b505afa158015611a5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7f9190612b99565b151560011461193e5760405162461bcd60e51b815260206004820152601960248201527f627269646765207769746864726177206e6f7420657869737400000000000000604482015260640161058a565b6003611adf6020860186612b4e565b6006811115611af057611af06127ee565b1480611b1957506004611b066020860186612b4e565b6006811115611b1757611b176127ee565b145b15611d9b57611b2e6060850160408601612347565b611b3e6080860160608701612347565b6080860135611b536040880160208901612347565b611b6360e0890160c08a01612b6f565b604051606095861b6001600160601b0319908116602083015294861b851660348201526048810193909352931b909116606882015260c09190911b6001600160c01b031916607c82015260e0850135608482015260a40160408051601f19818403018152919052805160209091012091506003611be36020860186612b4e565b6006811115611bf457611bf46127ee565b1415611ccb57506006546040516301e6472560e01b8152600481018390526001600160a01b039091169081906301e64725906024015b60206040518083038186803b158015611c4257600080fd5b505afa158015611c56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7a9190612b99565b151560011461193e5760405162461bcd60e51b815260206004820152601560248201527f6d696e74207265636f7264206e6f742065786973740000000000000000000000604482015260640161058a565b506007546040516301e6472560e01b8152600481018390526001600160a01b039091169081906301e647259060240160206040518083038186803b158015611d1257600080fd5b505afa158015611d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4a9190612b99565b151560011461193e5760405162461bcd60e51b815260206004820152601960248201527f7769746864726177207265636f7264206e6f7420657869737400000000000000604482015260640161058a565b6005611daa6020860186612b4e565b6006811115611dbb57611dbb6127ee565b1480611de457506006611dd16020860186612b4e565b6006811115611de257611de26127ee565b145b15612008576005611df86020860186612b4e565b6006811115611e0957611e096127ee565b1415611e2157506008546001600160a01b0316611e2f565b506009546001600160a01b03165b611e3f6060850160408601612347565b611e4f6080860160608701612347565b6080860135611e646040880160208901612347565b611e7460e0890160c08a01612b6f565b604051606095861b6001600160601b0319908116602083015294861b85166034820152604881019390935290841b8316606883015260c01b6001600160c01b031916607c82015260e087013560848201529183901b1660a482015260b80160408051601f19818403018152919052805160209091012091506005611efb6020860186612b4e565b6006811115611f0c57611f0c6127ee565b1415611f3f576040516301e6472560e01b8152600481018390526001600160a01b038216906301e6472590602401611c2a565b6040516301e6472560e01b8152600481018390526001600160a01b038216906301e647259060240160206040518083038186803b158015611f7f57600080fd5b505afa158015611f93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb79190612b99565b15156001146120085760405162461bcd60e51b815260206004820152601960248201527f7769746864726177207265636f7264206e6f7420657869737400000000000000604482015260640161058a565b6000818360405160200161201e93929190612bd2565b6040516020818303038152906040528051906020012092505050919050565b600080806120516060870160408801612347565b6001600160a01b03163463105f4af960e11b61207360808a0160608b01612347565b8960800135898960405160240161208d9493929190612bfe565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516120f89190612c31565b60006040518083038185875af1925050503d8060008114612135576040519150601f19603f3d011682016040523d82523d6000602084013e61213a565b606091505b509150915081156121665760008180602001905181019061215b9190612b99565b935061216d92505050565b6000925050505b9392505050565b600060016121856020860186612347565b6121956040870160208801612347565b6121a56060880160408901612b6f565b86866040516020016121bc96959493929190612c4d565b6040516020818303038152906040528051906020012090509392505050565b600080806121ef6040870160208801612347565b6001600160a01b031634631599d26560e01b61220e60208a018a612347565b61221e60608b0160408c01612b6f565b898960405160240161208d9493929190612cac565b600080806122476060870160408801612347565b6001600160a01b03163463671aeecd60e11b61226960408a0160208b01612347565b61227960808b0160608c01612347565b60808b013561228e60e08d0160c08e01612b6f565b8b8b60405160240161208d96959493929190612cdf565b600080806122b96060870160408801612347565b6001600160a01b0316346378079ce760e11b61226960408a0160208b01612347565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461234257600080fd5b919050565b60006020828403121561235957600080fd5b610a078261232b565b60006020828403121561237457600080fd5b5035919050565b60008083601f84011261238d57600080fd5b50813567ffffffffffffffff8111156123a557600080fd5b6020830191508360208260051b85010111156123c057600080fd5b9250929050565b60008060008060008060008060a0898b0312156123e357600080fd5b6123ec8961232b565b975060208901359650604089013567ffffffffffffffff8082111561241057600080fd5b61241c8c838d0161237b565b909850965060608b013591508082111561243557600080fd5b6124418c838d0161237b565b909650945060808b013591508082111561245a57600080fd5b506124678b828c0161237b565b999c989b5096995094979396929594505050565b600080600080600060a0868803121561249357600080fd5b61249c8661232b565b94506124aa6020870161232b565b93506124b86040870161232b565b92506124c66060870161232b565b91506124d46080870161232b565b90509295509295909350565b60008083601f8401126124f257600080fd5b50813567ffffffffffffffff81111561250a57600080fd5b6020830191508360208285010111156123c057600080fd5b60008060008060008060a0878903121561253b57600080fd5b6125448761232b565b9550602087013594506125596040880161232b565b935060608701359250608087013567ffffffffffffffff81111561257c57600080fd5b61258889828a016124e0565b979a9699509497509295939492505050565b600080602083850312156125ad57600080fd5b823567ffffffffffffffff8111156125c457600080fd5b6125d0858286016124e0565b90969095509350505050565b6000806000806000806000806000898b036101808112156125fc57600080fd5b8a3567ffffffffffffffff8082111561261457600080fd5b6126208e838f016124e0565b909c509a508a9150610100601f198401121561263b57600080fd5b60208d0199506101208d013592508083111561265657600080fd5b6126628e848f0161237b565b90995097506101408d013592508891508083111561267f57600080fd5b61268b8e848f0161237b565b90975095506101608d01359250869150808311156126a857600080fd5b50506126b68c828d0161237b565b915080935050809150509295985092959850929598565b6000806000806000806000806000898b0360e08112156126ec57600080fd5b8a3567ffffffffffffffff8082111561270457600080fd5b6127108e838f016124e0565b909c509a508a91506060601f198401121561272a57600080fd5b60208d01995060808d013592508083111561274457600080fd5b6127508e848f0161237b565b909950975060a08d013592508891508083111561276c57600080fd5b6127788e848f0161237b565b909750955060c08d01359250869150808311156126a857600080fd5b600080600080606085870312156127aa57600080fd5b6127b38561232b565b935060208501359250604085013567ffffffffffffffff8111156127d657600080fd5b6127e2878288016124e0565b95989497509550505050565b634e487b7160e01b600052602160045260246000fd5b60058110612814576128146127ee565b9052565b60208101610a0a8284612804565b60005b83811015612841578181015183820152602001612829565b83811115612850576000848401525b50505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8183526000602080850194508260005b858110156128bb576001600160a01b036128a88361232b565b168752958201959082019060010161288f565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156128f857600080fd5b8260051b8083602087013760009401602001938452509192915050565b60808152600088518060808401526129348160a0850160208d01612826565b601f01601f1916820182810360a090810160208501528101889052600588901b810160c09081019082018a60005b8b8110156129d55784840360bf190183528135368e9003601e1901811261298857600080fd5b8d01803567ffffffffffffffff8111156129a157600080fd5b8036038f13156129b057600080fd5b6129be868260208501612856565b955050506020928301929190910190600101612962565b50505083810360408501526129eb81888a61287f565b9150508281036060840152612a018185876128c6565b9a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b600082821015612a3757612a37612a0f565b500390565b60006001600160a01b03808a16835288602084015280881660408401525085606083015260c06080830152612a7560c083018587612856565b90508260a083015298975050505050505050565b6000816000190483118215151615612aa357612aa3612a0f565b500290565b60008219821115612abb57612abb612a0f565b500190565b84815283602082015281836040830137600091016040019081529392505050565b6060810160028510612af557612af56127ee565b848252836020830152612b0b6040830184612804565b949350505050565b6001600160a01b0386168152846020820152608060408201526000612b3c608083018587612856565b90508260608301529695505050505050565b600060208284031215612b6057600080fd5b81356007811061216d57600080fd5b600060208284031215612b8157600080fd5b813567ffffffffffffffff8116811461216d57600080fd5b600060208284031215612bab57600080fd5b8151801515811461216d57600080fd5b60028110612bcb57612bcb6127ee565b60f81b9052565b612bdc8185612bbb565b60609290921b6001600160601b03191660018301526015820152603501919050565b6001600160a01b0385168152836020820152606060408201526000612c27606083018486612856565b9695505050505050565b60008251612c43818460208701612826565b9190910192915050565b612c578188612bbb565b60006bffffffffffffffffffffffff19808860601b166001840152808760601b166015840152506001600160c01b03198560c01b16602983015282846031840137506000910160310190815295945050505050565b6001600160a01b038516815267ffffffffffffffff84166020820152606060408201526000612c27606083018486612856565b60006001600160a01b03808916835280881660208401525085604083015267ffffffffffffffff8516606083015260a06080830152612d2260a083018486612856565b9897505050505050505056fea2646970667358221220e7f486187951953cf7f3f3a416a8d6c08342a3ab3d2000cc969346ebcf195c4b64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101ac5760003560e01c806395b12c27116100ec578063cd2abd661161008a578063e2c1ed2511610064578063e2c1ed25146104af578063f2fde38b146104cf578063f60bbe2a146104ef578063f83b0fb91461050557600080fd5b8063cd2abd6614610432578063d8257d171461046f578063dfa2dbaf1461048f57600080fd5b80639f3ce55a116100c65780639f3ce55a146103b8578063a2232213146103cb578063c66a9c5a146103de578063ccf2683b146103fe57600080fd5b806395b12c271461036257806395e911a8146103825780639b05a7751461039857600080fd5b8063588be02b11610159578063654317bf11610133578063654317bf146102d957806382980dc4146102ec57806382efd502146103245780638da5cb5b1461034457600080fd5b8063588be02b14610279578063588df416146102995780635b3e5f50146102ac57600080fd5b8063359ef75b1161018a578063359ef75b146102135780634289fbb3146102335780635335dca21461024657600080fd5b806303cbfe66146101b157806306c28bd6146101d35780632ff4c411146101f3575b600080fd5b3480156101bd57600080fd5b506101d16101cc366004612347565b610525565b005b3480156101df57600080fd5b506101d16101ee366004612362565b610630565b3480156101ff57600080fd5b506101d161020e3660046123c7565b6106ce565b34801561021f57600080fd5b506101d161022e36600461247b565b610927565b6101d1610241366004612522565b610943565b34801561025257600080fd5b5061026661026136600461259a565b6109ea565b6040519081526020015b60405180910390f35b34801561028557600080fd5b506101d1610294366004612347565b610a10565b6101d16102a73660046125dc565b610b0f565b3480156102b857600080fd5b506102666102c7366004612347565b60036020526000908152604090205481565b6101d16102e73660046126cd565b610d52565b3480156102f857600080fd5b5060055461030c906001600160a01b031681565b6040516001600160a01b039091168152602001610270565b34801561033057600080fd5b506101d161033f366004612347565b610f61565b34801561035057600080fd5b506000546001600160a01b031661030c565b34801561036e57600080fd5b5060085461030c906001600160a01b031681565b34801561038e57600080fd5b5061026660015481565b3480156103a457600080fd5b506101d16103b3366004612347565b611060565b6101d16103c6366004612794565b61115f565b6101d16103d93660046125dc565b611200565b3480156103ea57600080fd5b5060095461030c906001600160a01b031681565b34801561040a57600080fd5b5061030c7f000000000000000000000000000000000000000000000000000000000000000081565b34801561043e57600080fd5b5061046261044d366004612362565b60046020526000908152604090205460ff1681565b6040516102709190612818565b34801561047b57600080fd5b5060075461030c906001600160a01b031681565b34801561049b57600080fd5b5060065461030c906001600160a01b031681565b3480156104bb57600080fd5b506101d16104ca366004612362565b6113da565b3480156104db57600080fd5b506101d16104ea366004612347565b611478565b3480156104fb57600080fd5b5061026660025481565b34801561051157600080fd5b506101d1610520366004612347565b611569565b336105386000546001600160a01b031690565b6001600160a01b0316146105935760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b0381166105db5760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b604482015260640161058a565b600680546001600160a01b0319166001600160a01b0383169081179091556040519081527fd60e9ceb4f54f1bfb1741a4b35fc9d806d7ed48200b523203b92248ea38fa17d906020015b60405180910390a150565b336106436000546001600160a01b031690565b6001600160a01b0316146106995760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161058a565b60018190556040518181527f892dfdc99ecd3bb4f2f2cb118dca02f0bd16640ff156d3c6459d4282e336a5f290602001610625565b6000463060405160200161071f92919091825260601b6001600160601b03191660208201527f77697468647261774665650000000000000000000000000000000000000000006034820152603f0190565b60408051808303601f19018152828252805160209182012090830181905260608c901b6001600160601b0319168383015260548084018c9052825180850390910181526074840192839052633416de1160e11b90925292507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169163682dbc22916107c0918b908b908b908b908b908b90607801612915565b60006040518083038186803b1580156107d857600080fd5b505afa1580156107ec573d6000803e3d6000fd5b505050506001600160a01b038916600090815260036020526040812054610813908a612a25565b9050600081116108655760405162461bcd60e51b815260206004820152601960248201527f4e6f206e657720616d6f756e7420746f20776974686472617700000000000000604482015260640161058a565b6001600160a01b038a166000818152600360205260408082208c90555190919061c35090849084818181858888f193505050503d80600081146108c4576040519150601f19603f3d011682016040523d82523d6000602084013e6108c9565b606091505b505090508061091a5760405162461bcd60e51b815260206004820152601660248201527f6661696c656420746f2077697468647261772066656500000000000000000000604482015260640161058a565b5050505050505050505050565b61092f611668565b61093c85858585856116cc565b5050505050565b600061094f83836109ea565b9050803410156109945760405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742066656560801b604482015260640161058a565b336001600160a01b03167f172762498a59a3bc4fed3f2b63f94f17ea0193cffdc304fe7d3eaf4d342d2f66888888888888346040516109d99796959493929190612a3c565b60405180910390a250505050505050565b6002546000906109fa9083612a89565b600154610a079190612aa8565b90505b92915050565b33610a236000546001600160a01b031690565b6001600160a01b031614610a795760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161058a565b6001600160a01b038116610ac15760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b604482015260640161058a565b600580546001600160a01b0319166001600160a01b0383169081179091556040519081527fbf9977180dc6e6cff25598c8e59150cecd7f8e448e092633d38ab7ee223ae05890602001610625565b6000610b1a88611784565b90506000808281526004602081905260409091205460ff1690811115610b4257610b426127ee565b14610b8f5760405162461bcd60e51b815260206004820152601960248201527f7472616e7366657220616c726561647920657865637574656400000000000000604482015260640161058a565b6000818152600460208181526040808420805460ff1916909317909255815146918101919091526001600160601b03193060601b16918101919091527f4d657373616765576974685472616e73666572526566756e64000000000000006054820152606d01604051602081830303815290604052805190602001209050600560009054906101000a90046001600160a01b03166001600160a01b031663682dbc2282848e8e604051602001610c479493929190612ac0565b6040516020818303038152906040528a8a8a8a8a8a6040518863ffffffff1660e01b8152600401610c7e9796959493929190612915565b60006040518083038186803b158015610c9657600080fd5b505afa158015610caa573d6000803e3d6000fd5b50505050600080610cbc8b8e8e61203d565b90508015610ccd5760019150610cd2565b600291505b60008481526004602081905260409091208054849260ff19909116906001908490811115610d0257610d026127ee565b02179055507f29122f2c841ca2c3b2feefc4c23e90755d735d8e5b84f307151532e0f1ad62e760008584604051610d3b93929190612ae1565b60405180910390a150505050505050505050505050565b6000610d5f888b8b612174565b90506000808281526004602081905260409091205460ff1690811115610d8757610d876127ee565b14610dd45760405162461bcd60e51b815260206004820152601860248201527f6d65737361676520616c72656164792065786563757465640000000000000000604482015260640161058a565b600081815260046020818152604092839020805460ff1916909217909155815146818301523060601b6001600160601b031916818401527f4d6573736167650000000000000000000000000000000000000000000000000060548201528251603b818303018152605b820184528051920191909120600554607b8301829052609b8084018690528451808503909101815260bb840194859052633416de1160e11b90945290926001600160a01b039091169163682dbc2291610ea4918c908c908c908c908c908c9060bf01612915565b60006040518083038186803b158015610ebc57600080fd5b505afa158015610ed0573d6000803e3d6000fd5b50505050600080610ee28b8e8e6121db565b90508015610ef35760019150610ef8565b600291505b60008481526004602081905260409091208054849260ff19909116906001908490811115610f2857610f286127ee565b02179055507f29122f2c841ca2c3b2feefc4c23e90755d735d8e5b84f307151532e0f1ad62e760018584604051610d3b93929190612ae1565b33610f746000546001600160a01b031690565b6001600160a01b031614610fca5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161058a565b6001600160a01b0381166110125760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b604482015260640161058a565b600880546001600160a01b0319166001600160a01b0383169081179091556040519081527ffb337a6c76476534518d5816caeb86263972470fedccfd047a35eb1825eaa9e890602001610625565b336110736000546001600160a01b031690565b6001600160a01b0316146110c95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161058a565b6001600160a01b0381166111115760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b604482015260640161058a565b600780546001600160a01b0319166001600160a01b0383169081179091556040519081527fa9db0c32d9c6c2f75f3b95047a9e67cc1c010eab792a4e6ca777ce918ad94aad90602001610625565b600061116b83836109ea565b9050803410156111b05760405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742066656560801b604482015260640161058a565b336001600160a01b03167fce3972bfffe49d317e1d128047a97a3d86b25c94f6f04409f988ef854d25e0e486868686346040516111f1959493929190612b13565b60405180910390a25050505050565b600061120b88611784565b90506000808281526004602081905260409091205460ff1690811115611233576112336127ee565b146112805760405162461bcd60e51b815260206004820152601960248201527f7472616e7366657220616c726561647920657865637574656400000000000000604482015260640161058a565b6000818152600460208181526040808420805460ff1916909317909255815146918101919091526001600160601b03193060601b16918101919091527f4d657373616765576974685472616e73666572000000000000000000000000006054820152606701604051602081830303815290604052805190602001209050600560009054906101000a90046001600160a01b03166001600160a01b031663682dbc2282848e8e6040516020016113389493929190612ac0565b6040516020818303038152906040528a8a8a8a8a8a6040518863ffffffff1660e01b815260040161136f9796959493929190612915565b60006040518083038186803b15801561138757600080fd5b505afa15801561139b573d6000803e3d6000fd5b505050506000806113ad8b8e8e612233565b905080156113be5760019150610cd2565b6113c98b8e8e6122a5565b90508015610ccd5760039150610cd2565b336113ed6000546001600160a01b031690565b6001600160a01b0316146114435760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161058a565b60028190556040518181527f210d4d5d2d36d571207dac98e383e2441c684684c885fb2d7c54f8d24422074c90602001610625565b3361148b6000546001600160a01b031690565b6001600160a01b0316146114e15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161058a565b6001600160a01b03811661155d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161058a565b611566816122db565b50565b3361157c6000546001600160a01b031690565b6001600160a01b0316146115d25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161058a565b6001600160a01b03811661161a5760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b604482015260640161058a565b600980546001600160a01b0319166001600160a01b0383169081179091556040519081527f918a691a2a82482a10e11f43d7b627b2ba220dd08f251cb61933c42560f6fcb590602001610625565b6000546001600160a01b0316156116c15760405162461bcd60e51b815260206004820152601160248201527f6f776e657220616c726561647920736574000000000000000000000000000000604482015260640161058a565b6116ca336122db565b565b6005546001600160a01b0316156117255760405162461bcd60e51b815260206004820152601b60248201527f6c697175696469747942726964676520616c7265616479207365740000000000604482015260640161058a565b600580546001600160a01b03199081166001600160a01b03978816179091556006805482169587169590951790945560078054851693861693909317909255600880548416918516919091179055600980549092169216919091179055565b6000808060016117976020860186612b4e565b60068111156117a8576117a86127ee565b1415611943576117be6040850160208601612347565b6117ce6060860160408701612347565b6117de6080870160608801612347565b60808701356117f360e0890160c08a01612b6f565b6040516001600160601b0319606096871b8116602083015294861b851660348201529290941b9092166048820152605c8101919091526001600160c01b031960c092831b8116607c8301524690921b909116608482015260e0850135608c82015260ac0160408051808303601f19018152908290528051602090910120600554633c64f04b60e01b8352600483018290529093506001600160a01b031691508190633c64f04b9060240160206040518083038186803b1580156118b557600080fd5b505afa1580156118c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ed9190612b99565b151560011461193e5760405162461bcd60e51b815260206004820152601660248201527f6272696467652072656c6179206e6f7420657869737400000000000000000000604482015260640161058a565b612008565b60026119526020860186612b4e565b6006811115611963576119636127ee565b1415611ad0574661197a60c0860160a08701612b6f565b61198a6060870160408801612347565b61199a6080880160608901612347565b6040516001600160c01b031960c095861b811660208301529390941b90921660288401526001600160601b0319606091821b8116603085015291901b1660448201526080850135605882015260780160408051808303601f19018152908290528051602090910120600554631c13568560e31b8352600483018290529093506001600160a01b03169150819063e09ab4289060240160206040518083038186803b158015611a4757600080fd5b505afa158015611a5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7f9190612b99565b151560011461193e5760405162461bcd60e51b815260206004820152601960248201527f627269646765207769746864726177206e6f7420657869737400000000000000604482015260640161058a565b6003611adf6020860186612b4e565b6006811115611af057611af06127ee565b1480611b1957506004611b066020860186612b4e565b6006811115611b1757611b176127ee565b145b15611d9b57611b2e6060850160408601612347565b611b3e6080860160608701612347565b6080860135611b536040880160208901612347565b611b6360e0890160c08a01612b6f565b604051606095861b6001600160601b0319908116602083015294861b851660348201526048810193909352931b909116606882015260c09190911b6001600160c01b031916607c82015260e0850135608482015260a40160408051601f19818403018152919052805160209091012091506003611be36020860186612b4e565b6006811115611bf457611bf46127ee565b1415611ccb57506006546040516301e6472560e01b8152600481018390526001600160a01b039091169081906301e64725906024015b60206040518083038186803b158015611c4257600080fd5b505afa158015611c56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7a9190612b99565b151560011461193e5760405162461bcd60e51b815260206004820152601560248201527f6d696e74207265636f7264206e6f742065786973740000000000000000000000604482015260640161058a565b506007546040516301e6472560e01b8152600481018390526001600160a01b039091169081906301e647259060240160206040518083038186803b158015611d1257600080fd5b505afa158015611d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4a9190612b99565b151560011461193e5760405162461bcd60e51b815260206004820152601960248201527f7769746864726177207265636f7264206e6f7420657869737400000000000000604482015260640161058a565b6005611daa6020860186612b4e565b6006811115611dbb57611dbb6127ee565b1480611de457506006611dd16020860186612b4e565b6006811115611de257611de26127ee565b145b15612008576005611df86020860186612b4e565b6006811115611e0957611e096127ee565b1415611e2157506008546001600160a01b0316611e2f565b506009546001600160a01b03165b611e3f6060850160408601612347565b611e4f6080860160608701612347565b6080860135611e646040880160208901612347565b611e7460e0890160c08a01612b6f565b604051606095861b6001600160601b0319908116602083015294861b85166034820152604881019390935290841b8316606883015260c01b6001600160c01b031916607c82015260e087013560848201529183901b1660a482015260b80160408051601f19818403018152919052805160209091012091506005611efb6020860186612b4e565b6006811115611f0c57611f0c6127ee565b1415611f3f576040516301e6472560e01b8152600481018390526001600160a01b038216906301e6472590602401611c2a565b6040516301e6472560e01b8152600481018390526001600160a01b038216906301e647259060240160206040518083038186803b158015611f7f57600080fd5b505afa158015611f93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb79190612b99565b15156001146120085760405162461bcd60e51b815260206004820152601960248201527f7769746864726177207265636f7264206e6f7420657869737400000000000000604482015260640161058a565b6000818360405160200161201e93929190612bd2565b6040516020818303038152906040528051906020012092505050919050565b600080806120516060870160408801612347565b6001600160a01b03163463105f4af960e11b61207360808a0160608b01612347565b8960800135898960405160240161208d9493929190612bfe565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516120f89190612c31565b60006040518083038185875af1925050503d8060008114612135576040519150601f19603f3d011682016040523d82523d6000602084013e61213a565b606091505b509150915081156121665760008180602001905181019061215b9190612b99565b935061216d92505050565b6000925050505b9392505050565b600060016121856020860186612347565b6121956040870160208801612347565b6121a56060880160408901612b6f565b86866040516020016121bc96959493929190612c4d565b6040516020818303038152906040528051906020012090509392505050565b600080806121ef6040870160208801612347565b6001600160a01b031634631599d26560e01b61220e60208a018a612347565b61221e60608b0160408c01612b6f565b898960405160240161208d9493929190612cac565b600080806122476060870160408801612347565b6001600160a01b03163463671aeecd60e11b61226960408a0160208b01612347565b61227960808b0160608c01612347565b60808b013561228e60e08d0160c08e01612b6f565b8b8b60405160240161208d96959493929190612cdf565b600080806122b96060870160408801612347565b6001600160a01b0316346378079ce760e11b61226960408a0160208b01612347565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461234257600080fd5b919050565b60006020828403121561235957600080fd5b610a078261232b565b60006020828403121561237457600080fd5b5035919050565b60008083601f84011261238d57600080fd5b50813567ffffffffffffffff8111156123a557600080fd5b6020830191508360208260051b85010111156123c057600080fd5b9250929050565b60008060008060008060008060a0898b0312156123e357600080fd5b6123ec8961232b565b975060208901359650604089013567ffffffffffffffff8082111561241057600080fd5b61241c8c838d0161237b565b909850965060608b013591508082111561243557600080fd5b6124418c838d0161237b565b909650945060808b013591508082111561245a57600080fd5b506124678b828c0161237b565b999c989b5096995094979396929594505050565b600080600080600060a0868803121561249357600080fd5b61249c8661232b565b94506124aa6020870161232b565b93506124b86040870161232b565b92506124c66060870161232b565b91506124d46080870161232b565b90509295509295909350565b60008083601f8401126124f257600080fd5b50813567ffffffffffffffff81111561250a57600080fd5b6020830191508360208285010111156123c057600080fd5b60008060008060008060a0878903121561253b57600080fd5b6125448761232b565b9550602087013594506125596040880161232b565b935060608701359250608087013567ffffffffffffffff81111561257c57600080fd5b61258889828a016124e0565b979a9699509497509295939492505050565b600080602083850312156125ad57600080fd5b823567ffffffffffffffff8111156125c457600080fd5b6125d0858286016124e0565b90969095509350505050565b6000806000806000806000806000898b036101808112156125fc57600080fd5b8a3567ffffffffffffffff8082111561261457600080fd5b6126208e838f016124e0565b909c509a508a9150610100601f198401121561263b57600080fd5b60208d0199506101208d013592508083111561265657600080fd5b6126628e848f0161237b565b90995097506101408d013592508891508083111561267f57600080fd5b61268b8e848f0161237b565b90975095506101608d01359250869150808311156126a857600080fd5b50506126b68c828d0161237b565b915080935050809150509295985092959850929598565b6000806000806000806000806000898b0360e08112156126ec57600080fd5b8a3567ffffffffffffffff8082111561270457600080fd5b6127108e838f016124e0565b909c509a508a91506060601f198401121561272a57600080fd5b60208d01995060808d013592508083111561274457600080fd5b6127508e848f0161237b565b909950975060a08d013592508891508083111561276c57600080fd5b6127788e848f0161237b565b909750955060c08d01359250869150808311156126a857600080fd5b600080600080606085870312156127aa57600080fd5b6127b38561232b565b935060208501359250604085013567ffffffffffffffff8111156127d657600080fd5b6127e2878288016124e0565b95989497509550505050565b634e487b7160e01b600052602160045260246000fd5b60058110612814576128146127ee565b9052565b60208101610a0a8284612804565b60005b83811015612841578181015183820152602001612829565b83811115612850576000848401525b50505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8183526000602080850194508260005b858110156128bb576001600160a01b036128a88361232b565b168752958201959082019060010161288f565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156128f857600080fd5b8260051b8083602087013760009401602001938452509192915050565b60808152600088518060808401526129348160a0850160208d01612826565b601f01601f1916820182810360a090810160208501528101889052600588901b810160c09081019082018a60005b8b8110156129d55784840360bf190183528135368e9003601e1901811261298857600080fd5b8d01803567ffffffffffffffff8111156129a157600080fd5b8036038f13156129b057600080fd5b6129be868260208501612856565b955050506020928301929190910190600101612962565b50505083810360408501526129eb81888a61287f565b9150508281036060840152612a018185876128c6565b9a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b600082821015612a3757612a37612a0f565b500390565b60006001600160a01b03808a16835288602084015280881660408401525085606083015260c06080830152612a7560c083018587612856565b90508260a083015298975050505050505050565b6000816000190483118215151615612aa357612aa3612a0f565b500290565b60008219821115612abb57612abb612a0f565b500190565b84815283602082015281836040830137600091016040019081529392505050565b6060810160028510612af557612af56127ee565b848252836020830152612b0b6040830184612804565b949350505050565b6001600160a01b0386168152846020820152608060408201526000612b3c608083018587612856565b90508260608301529695505050505050565b600060208284031215612b6057600080fd5b81356007811061216d57600080fd5b600060208284031215612b8157600080fd5b813567ffffffffffffffff8116811461216d57600080fd5b600060208284031215612bab57600080fd5b8151801515811461216d57600080fd5b60028110612bcb57612bcb6127ee565b60f81b9052565b612bdc8185612bbb565b60609290921b6001600160601b03191660018301526015820152603501919050565b6001600160a01b0385168152836020820152606060408201526000612c27606083018486612856565b9695505050505050565b60008251612c43818460208701612826565b9190910192915050565b612c578188612bbb565b60006bffffffffffffffffffffffff19808860601b166001840152808760601b166015840152506001600160c01b03198560c01b16602983015282846031840137506000910160310190815295945050505050565b6001600160a01b038516815267ffffffffffffffff84166020820152606060408201526000612c27606083018486612856565b60006001600160a01b03808916835280881660208401525085604083015267ffffffffffffffff8516606083015260a06080830152612d2260a083018486612856565b9897505050505050505056fea2646970667358221220e7f486187951953cf7f3f3a416a8d6c08342a3ab3d2000cc969346ebcf195c4b64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calcFee(bytes)": {
        "params": {
          "_message": "Arbitrary message bytes to be decoded by the destination app contract. @return The required fee."
        }
      },
      "executeMessage(bytes,(address,address,uint64),bytes[],address[],uint256[])": {
        "params": {
          "_message": "Arbitrary message bytes originated from and encoded by the source app contract",
          "_powers": "The signing powers of the signers.",
          "_signers": "The sorted list of signers.",
          "_sigs": "The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by +2/3 of the sigsVerifier's current signing power to be delivered."
        }
      },
      "executeMessageWithTransfer(bytes,(uint8,address,address,address,uint256,uint64,uint64,bytes32),bytes[],address[],uint256[])": {
        "params": {
          "_message": "Arbitrary message bytes originated from and encoded by the source app contract",
          "_powers": "The signing powers of the signers.",
          "_signers": "The sorted list of signers.",
          "_sigs": "The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.",
          "_transfer": "The transfer info."
        }
      },
      "executeMessageWithTransferRefund(bytes,(uint8,address,address,address,uint256,uint64,uint64,bytes32),bytes[],address[],uint256[])": {
        "params": {
          "_message": "Arbitrary message bytes originated from and encoded by the source app contract",
          "_powers": "The signing powers of the signers.",
          "_signers": "The sorted list of signers.",
          "_sigs": "The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.",
          "_transfer": "The transfer info."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "sendMessage(address,uint256,bytes)": {
        "params": {
          "_dstChainId": "The destination chain ID.",
          "_message": "Arbitrary message bytes to be decoded by the destination app contract.",
          "_receiver": "The address of the destination app contract."
        }
      },
      "sendMessageWithTransfer(address,uint256,address,bytes32,bytes)": {
        "params": {
          "_dstChainId": "The destination chain ID.",
          "_message": "Arbitrary message bytes to be decoded by the destination app contract.",
          "_receiver": "The address of the destination app contract.",
          "_srcBridge": "The bridge contract to send the transfer with.",
          "_srcTransferId": "The transfer ID."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawFee(address,uint256,bytes[],address[],uint256[])": {
        "params": {
          "_account": "The address receiving the fee.",
          "_cumulativeFee": "The cumulative fee credited to the account. Tracked by SGN.",
          "_powers": "The signing powers of the signers.",
          "_signers": "The sorted list of signers.",
          "_sigs": "The list of signatures sorted by signing addresses in ascending order. A withdrawal must be signed-off by +2/3 of the sigsVerifier's current signing power to be delivered."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calcFee(bytes)": {
        "notice": "Calculates the required fee for the message."
      },
      "executeMessage(bytes,(address,address,uint64),bytes[],address[],uint256[])": {
        "notice": "Execute a message not associated with a transfer."
      },
      "executeMessageWithTransfer(bytes,(uint8,address,address,address,uint256,uint64,uint64,bytes32),bytes[],address[],uint256[])": {
        "notice": "Execute a message with a successful transfer."
      },
      "executeMessageWithTransferRefund(bytes,(uint8,address,address,address,uint256,uint64,uint64,bytes32),bytes[],address[],uint256[])": {
        "notice": "Execute a message with a refunded transfer."
      },
      "sendMessage(address,uint256,bytes)": {
        "notice": "Sends a message to an app on another chain via MessageBus without an associated transfer. A fee is charged in the native gas token."
      },
      "sendMessageWithTransfer(address,uint256,address,bytes32,bytes)": {
        "notice": "Sends a message associated with a transfer to an app on another chain via MessageBus without an associated transfer. A fee is charged in the native token."
      },
      "withdrawFee(address,uint256,bytes[],address[],uint256[])": {
        "notice": "Withdraws message fee in the form of native gas token."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19424,
        "contract": "contracts/message/messagebus/MessageBus.sol:MessageBus",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14880,
        "contract": "contracts/message/messagebus/MessageBus.sol:MessageBus",
        "label": "feeBase",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 14882,
        "contract": "contracts/message/messagebus/MessageBus.sol:MessageBus",
        "label": "feePerByte",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 14886,
        "contract": "contracts/message/messagebus/MessageBus.sol:MessageBus",
        "label": "withdrawnFees",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13745,
        "contract": "contracts/message/messagebus/MessageBus.sol:MessageBus",
        "label": "executedMessages",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_enum(TxStatus)13740)"
      },
      {
        "astId": 13747,
        "contract": "contracts/message/messagebus/MessageBus.sol:MessageBus",
        "label": "liquidityBridge",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 13749,
        "contract": "contracts/message/messagebus/MessageBus.sol:MessageBus",
        "label": "pegBridge",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 13751,
        "contract": "contracts/message/messagebus/MessageBus.sol:MessageBus",
        "label": "pegVault",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 13753,
        "contract": "contracts/message/messagebus/MessageBus.sol:MessageBus",
        "label": "pegBridgeV2",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 13755,
        "contract": "contracts/message/messagebus/MessageBus.sol:MessageBus",
        "label": "pegVaultV2",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(TxStatus)13740": {
        "encoding": "inplace",
        "label": "enum MessageBusReceiver.TxStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_enum(TxStatus)13740)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => enum MessageBusReceiver.TxStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(TxStatus)13740"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}